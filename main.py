import mainparsing
import sqlite3
import maindatabasecode
import telegramkey
import telebot
import sqlite3
import traceback
from telebot import types

bot = telebot.TeleBot(telegramkey.bot)
@bot.message_handler(commands=['start'])
def start(message):
    print(message)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn1 = types.KeyboardButton("üë®‚Äçüè´ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
    btn2 = types.KeyboardButton("üíº –î–æ–±–∞–≤–∏—Ç—å –∫–µ–π—Å")
    btn3 = types.KeyboardButton("üìà –ü–æ—Å–º—Ç—Ä–µ—Ç—å –Ω–∞ –∫–µ–π—Å—ã")
    btn4 = types.KeyboardButton("üìà –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –≤–∞–ª—é—Ç—ã")
    btn5 = types.KeyboardButton("üõí –°—Ä–∞–≤–Ω–∏—Ç—å —Ü–µ–Ω—ã")
    markup.add(btn1, btn2, btn3, btn4, btn5)
    if message.text == '/start':
        bot.send_message(message.chat.id,
                         text="–î–∞—Ä–æ–≤–∞ –∫–ª–∏–∫–∞–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∏ –≤—Å–µ –±—É–¥–µ—Ç –∫—Ä—É—Ç–æüí™üëÄüëç".format(message.from_user),
                         reply_markup=markup)
    else:
        bot.send_message(message.chat.id,
                         text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –¥–æ–º–æ–πüí™üëÄüëç".format(message.from_user),
                         reply_markup=markup)

@bot.message_handler(content_types=['text'])
def buttons(message):
    if (message.text == "üë®‚Äçüè´ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        btn1 = types.KeyboardButton("‚ùïÔ∏è–û–±–Ω–æ–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è")
        btn2 = types.KeyboardButton("‚ùîÔ∏è–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–æ–∫–µ–Ω—ã")
        btn3 = types.KeyboardButton("‚≠ïÔ∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        markup.add(btn1, btn2, btn3)
        d = maindatabasecode.profileprint(message.from_user.id)
        v = list(d.keys())
        sst = '\n'
        for ind in range(len(d)):
            sst = sst + '<b>' + str(d[v[ind]][0]) + '</b>' + ' –∫—É–ø–ª–µ–Ω–Ω—ã–π –∑–∞ ' + '<b>' + str(d[v[ind]][1]) + '</b>' + ' —Ä—É–±–ª–µ–π.\n'
        msg = bot.send_message(message.chat.id, text=f"""
        –ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}, —Ç–≤–æ–∏ –∫–µ–π—Å—ã:{sst}
        """, reply_markup=markup, parse_mode='html')
        bot.register_next_step_handler(msg,handler_profileprint)
    elif (message.text == "üíº –î–æ–±–∞–≤–∏—Ç—å –∫–µ–π—Å"):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("‚≠ïÔ∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
        msg = bot.send_message(message.chat.id, text="–î–∞–≤–∞–π —Å—Å—ã–ª–∫—É –Ω–∞ –∫–µ–π—Å", reply_markup=markup)
        bot.register_next_step_handler(msg, handler_url)
    elif (message.text == "üìà –ü–æ—Å–º—Ç—Ä–µ—Ç—å –Ω–∞ –∫–µ–π—Å—ã"):
        bot.send_message(message.chat.id, text="–ü–æ–∫–∞ –ø—É—Å—Ç–æ")

    elif message.text == "üìà –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –≤–∞–ª—é—Ç—ã":
        bot.send_message(message.chat.id, text="–ü–æ–∫–∞ –ø—É—Å—Ç–æ")

    elif (message.text == "‚≠ïÔ∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" or '‚ö™Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'):
        start(message)
    elif (message.text == 'üõí –°—Ä–∞–≤–Ω–∏—Ç—å —Ü–µ–Ω—ã'):
        bot.send_message(message.chat.id, text="–ü–æ–∫–∞ –ø—É—Å—Ç–æ")
    else:
        bot.send_message(message.chat.id, text="–ù–∞ —Ç–∞–∫—É—é –∫–æ–º–º–∞–Ω–¥—É —è –Ω–µ –∑–∞–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–ª..")
        print(message)
        pass
def handler_url(message):
    global url
    if message.text == "‚≠ïÔ∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        start(message)
        return
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("‚≠ïÔ∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    markup2 = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn1 = types.KeyboardButton("‚úîÔ∏è–î–∞")
    btn2 = types.KeyboardButton("‚úñÔ∏è–ù–µ—Ç")
    btn3 = types.KeyboardButton("‚≠ïÔ∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup2.add(btn1, btn2, btn3)
    url = message.text
    try:
        with sqlite3.connect('database.db') as db:
            cursor = db.cursor()
            cursor.execute("SELECT url FROM cases WHERE url = ? AND userid = ?", [url, message.from_user.id])
            if cursor.fetchone() is None:
                cursor.execute('INSERT INTO cases(url,userid) VALUES(?,?)', [url, message.from_user.id])
                db.commit()
                msg = bot.reply_to(message, '–ó–∞ —Å–∫–æ–ª—å–∫–æ —Ç—ã –µ–≥–æ –ø–æ–∫—É–ø–∞–ª?', reply_markup=markup)
                bot.register_next_step_handler(msg, handler_price)
            else:
                cursor.execute('SELECT caseid FROM cases WHERE url = ? AND userid = ?', [url, message.from_user.id])
                caseid = cursor.fetchone()[0]
                cursor.execute('SELECT price FROM cases WHERE url = ? AND userid = ?', [url, message.from_user.id])
                caseprice = str(cursor.fetchone()[0])+' —Ä—É–±.'
                # print(str(cursor.fetchone()[0])+' —Ä—É–±.')
                urltaken = '–≠—Ç–æ—Ç –∫–µ–π—Å —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω –∏ –∏–º–µ–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–¥ <b>id %s</b> –≤ –¥–∞—Ç–∞–±–∞–∑–µ\n–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ü–µ–Ω–∞:<b>%s</b> –•–æ—á–µ—à—å –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –µ–≥–æ —Ü–µ–Ω—É?' % (caseid, caseprice)
                msg = bot.reply_to(message, text=urltaken, reply_markup=markup2, parse_mode='html')
                bot.register_next_step_handler(msg, handler_url_taken)
    except sqlite3.Error as e:
        print('—á–µ—Ç–∞ –µ–±–Ω—É–ª–æ')
        print('–û—à–∏–±–∫–∞:\n', traceback.format_exc())
    finally:
        cursor.close()
        db.close()
        return url

def handler_url_taken(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("‚≠ïÔ∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    if (message.text == "‚≠ïÔ∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"):
        start(message)
        return
    elif message.text == '‚úîÔ∏è–î–∞':
        msg = bot.reply_to(message, '–ó–∞ —Å–∫–æ–ª—å–∫–æ —Ç—ã –µ–≥–æ –ø–æ–∫—É–ø–∞–ª?', reply_markup=markup)
        bot.register_next_step_handler(msg, handler_price)
    elif message.text == '‚úñÔ∏è–ù–µ—Ç':
        start(message)
        return

def handler_price(message):
    with sqlite3.connect('database.db') as db:
        cursor = db.cursor()
        if message.text == "‚≠ïÔ∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            try:
                cursor.execute("DELETE FROM cases WHERE price = 0 and url = ? and userid = ?",
                               [url, message.from_user.id])
                db.commit()
            except TypeError:
                start(message)
            start(message)
            return
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("‚ö™Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
        try:
            price = message.text
            price = float(price.replace(",", '.'))
            cursor.execute("UPDATE cases SET price = ? WHERE url = ? AND userid = ?", [price, url, message.from_user.id])
            db.commit()
            bot.reply_to(message, '–ü—Ä–∏–Ω—è—Ç–æ!', reply_markup=markup)
            bot.send_message(message.chat.id, text="–í–µ—Ä–Ω–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é? ü•∞")
        except:
            print('—á–µ—Ç–∞ –µ–±–Ω—É–ª–æ')
            print('–û—à–∏–±–∫–∞:\n', traceback.format_exc())
            bot.reply_to(message, '–¥—É—Ä–∞—á–æ–∫? —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞ –≤–≤–æ–¥–∏. –¢–µ–ø–µ—Ä—å –Ω–∞—á–∏–Ω–∞–π –≤—Å–µ —Å–Ω–∞—á–∞–ª–∞')
            cursor.execute("DELETE FROM cases WHERE url = ? AND userid = ?", [url, message.from_user.id])
            db.commit()
            start(message)

def handler_profileprint(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn1 = types.KeyboardButton("‚ùïÔ∏è–û–±–Ω–æ–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è")
    btn2 = types.KeyboardButton("‚ùîÔ∏è–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–æ–∫–µ–Ω—ã")
    btn3 = types.KeyboardButton("‚≠ïÔ∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(btn1, btn2, btn3)
    if (message.text == "‚≠ïÔ∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"):
        start(message)
        return
    elif message.text == '‚ùïÔ∏è–û–±–Ω–æ–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è':
        mainparsing.takenames(message.from_user.id)
        bot.reply_to(message, '–ù–∞–∑–≤–∞–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É!', reply_markup=markup)
    elif message.text == '‚ùîÔ∏è–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–æ–∫–µ–Ω—ã':
        start(message)
        return


if __name__ == '__main__':
    bot.infinity_polling()
