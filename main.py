import mainparsing
import maindatabasecode
import telegramkey
import telebot
import sqlite3
import traceback
from time import sleep, strftime
from telebot import types
first_gramm = None
first_price = None
second_gramm = None
second_price = None
bot = telebot.TeleBot(telegramkey.bot)


@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn1 = types.KeyboardButton("üë®‚Äçüè´ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
    btn3 = types.KeyboardButton("üìà –ü–æ—Å–º—Ç—Ä–µ—Ç—å –Ω–∞ –∫–µ–π—Å—ã")
    btn4 = types.KeyboardButton("üìà –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –≤–∞–ª—é—Ç—ã")
    btn5 = types.KeyboardButton("üõí –°—Ä–∞–≤–Ω–∏—Ç—å —Ü–µ–Ω—ã")
    markup.add(btn1, btn3, btn4, btn5)
    if message.text == '/start':
        bot.send_message(message.chat.id,
                         text="–î–∞—Ä–æ–≤–∞ –∫–ª–∏–∫–∞–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∏ –≤—Å–µ –±—É–¥–µ—Ç –∫—Ä—É—Ç–æüí™üëÄüëç".format(message.from_user),
                         reply_markup=markup)
    else:
        bot.send_message(message.chat.id,
                         text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –¥–æ–º–æ–πüí™üëÄüëç".format(message.from_user),
                         reply_markup=markup)


@bot.message_handler(content_types=['text'])
def buttons(message):
    if message.text == "üë®‚Äçüè´ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å":
        myprofile(message)
    elif message.text == "üíº –î–æ–±–∞–≤–∏—Ç—å –∫–µ–π—Å":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("‚≠ïÔ∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
        msg = bot.send_message(message.chat.id, text="–î–∞–≤–∞–π —Å—Å—ã–ª–∫—É –Ω–∞ –∫–µ–π—Å", reply_markup=markup)
        bot.register_next_step_handler(msg, handler_url)

    elif message.text == "üìà –ü–æ—Å–º—Ç—Ä–µ—Ç—å –Ω–∞ –∫–µ–π—Å—ã" or message.text == '‚ôæ –û–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—ã':
        markup3 = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        btn1 = types.KeyboardButton("üíº –î–æ–±–∞–≤–∏—Ç—å –∫–µ–π—Å")
        btn2 = types.KeyboardButton("‚ôæ –û–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—ã")
        btn3 = types.KeyboardButton("‚≠ïÔ∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        markup3.add(btn1, btn2, btn3)
        takepricemsg = mainparsing.takeprice(message.from_user.id)
        if takepricemsg == '–ù–µ –æ–∫':
            sleep(3)
            takepricemsg = mainparsing.takeprice(message.from_user.id)
            if takepricemsg == '–ù–µ –æ–∫':
                msg = bot.send_message(message.chat.id, text="–ì–¥–µ-—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", reply_markup=markup3)
        else:
            msg = bot.send_message(message.chat.id, text=takepricemsg, reply_markup=markup3,
                                   parse_mode='html')
        bot.register_next_step_handler(msg, handler_caselookup)

    elif message.text == "üìà –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –≤–∞–ª—é—Ç—ã":
        bot.send_message(message.chat.id, text="–ü–æ–∫–∞ –ø—É—Å—Ç–æ")

    elif message.text == 'üõí –°—Ä–∞–≤–Ω–∏—Ç—å —Ü–µ–Ω—ã' or message.text == '‚Ü©Ô∏è–ü–æ—Å—á–∏—Ç–∞—Ç—å –µ—â–µ —Ä–∞–∑':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("‚≠ïÔ∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
        msg = bot.send_message(message.chat.id, text="–°–∫–æ–ª—å–∫–æ –≥—Ä–∞–º–º —É –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞?.", reply_markup=markup)
        bot.register_next_step_handler(msg, handler_priceculc0)

    elif message.text == "‚≠ïÔ∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" or message.text == '‚ö™Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        start(message)

    else:
        bot.send_message(message.chat.id, text="–ù–∞ —Ç–∞–∫—É—é –∫–æ–º–º–∞–Ω–¥—É —è –Ω–µ –∑–∞–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–ª..")
        start(message)
        pass
    print('%s | @%s | %s' % (strftime('%H:%M:%S %d.%m'), message.from_user.username, message.text))


def handler_priceculc0(message):
    global first_gramm
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("‚≠ïÔ∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    if message.text == "‚≠ïÔ∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        start(message)
        return
    try:
        first_gramm = float(message.text)
    except:
        bot.send_message(message.chat.id, text='–¢–æ–ª—å–∫–æ —Ü–∏—Ä—Ñ—ã, –¥–æ–ª–±–æ–µ–±')
        start(message)
    msg = bot.reply_to(message, '–ê —Å–∫–æ–ª—å–∫–æ —Ä—É–±–ª–µ–π –æ–Ω —Å—Ç–æ–∏—Ç?',
                       reply_markup=markup)
    bot.register_next_step_handler(msg, handler_priceculc1)


def handler_priceculc1(message):
    global first_price
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("‚≠ïÔ∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    if message.text == "‚≠ïÔ∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        start(message)
        return
    try:
        first_price = float(message.text)
    except:
        bot.send_message(message.chat.id, text='–¢–æ–ª—å–∫–æ —Ü–∏—Ä—Ñ—ã, –¥–æ–ª–±–æ–µ–±')
        start(message)
    msg = bot.send_message(message.chat.id, '–°–∫–æ–ª—å–∫–æ –≥—Ä–∞–º–º —É –≤—Ç–æ—Ä–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞?',
                           reply_markup=markup)
    bot.register_next_step_handler(msg, handler_priceculc2)


def handler_priceculc2(message):
    global second_gramm
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("‚≠ïÔ∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    if message.text == "‚≠ïÔ∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        start(message)
        return
    try:
        second_gramm = float(message.text)
    except:
        bot.send_message(message.chat.id, text='–¢–æ–ª—å–∫–æ —Ü–∏—Ä—Ñ—ã, –¥–æ–ª–±–æ–µ–±')
        start(message)
    msg = bot.reply_to(message, '–ê —Å–∫–æ–ª—å–∫–æ —Ä—É–±–ª–µ–π –æ–Ω —Å—Ç–æ–∏—Ç?',
                       reply_markup=markup)
    bot.register_next_step_handler(msg, handler_priceculc3)


def handler_priceculc3(message):
    global first_gramm
    global first_price
    global second_gramm
    global second_price
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("‚Ü©Ô∏è–ü–æ—Å—á–∏—Ç–∞—Ç—å –µ—â–µ —Ä–∞–∑"))
    markup.add(types.KeyboardButton("‚≠ïÔ∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    if message.text == "‚≠ïÔ∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        start(message)
        return
    try:
        first_price = float(first_price)
        second_price = float(message.text)
    except:
        bot.send_message(message.chat.id, text='–¢–æ–ª—å–∫–æ —Ü–∏—Ä—Ñ—ã, –¥–æ–ª–±–æ–µ–±')
        start(message)
    if first_gramm < 10:
        first_gramm = first_gramm * 1000
    if second_gramm < 10:
        second_gramm = second_gramm * 1000
    bot.send_message(message.chat.id, text=makeculc(first_price, second_price, first_gramm, second_gramm),
                     reply_markup=markup)
    # print(f'{first_gramm} –∑–∞ {first_price} –∏ {second_gramm} –∑–∞ {second_price}.')
    # print()


def makeculc(pervoe, vtoroe, pervoegram, vtoroegram):
    try:
        a = pervoe / pervoegram
        b = vtoroe / vtoroegram
        if a < b:
            d = a * 0.33
            if (a + d) < b and b / (a + d) > 1.05:
                c = '%s —Ä—É–±–ª–µ–π –∑–∞ %s –≥—Ä–∞–º–º –≤—ã–≥–æ–¥–Ω–µ–µ,\n—á–µ–º %s —Ä—É–±–ª–µ–π –∑–∞ %s –≥—Ä–∞–º–º!\n–û—á–µ–Ω—å –≤—ã–≥–æ–¥–Ω–æ!' % (
                    pervoe, pervoegram, vtoroe, vtoroegram)
                e = '1Ô∏è‚É£–ü–µ—Ä–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç –ª—É—á—à–µ!'
            else:
                c = '%s —Ä—É–±–ª–µ–π –∑–∞ %s –≥—Ä–∞–º–º –≤—ã–≥–æ–¥–Ω–µ–µ,\n—á–µ–º %s —Ä—É–±–ª–µ–π –∑–∞ %s –≥—Ä–∞–º–º!' % (
                    pervoe, pervoegram, vtoroe, vtoroegram)
                e = '1Ô∏è‚É£–ü–µ—Ä–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç –ª—É—á—à–µ!'
        elif a == b:
            c = '‚è∏–£ –Ω–∏—Ö –æ–¥–∏–Ω–∞–∫–æ–≤–∞—è —Ü–µ–Ω–∞'
            e = ""
        else:
            d = b * 0.33
            if (b + d) < a and a / (b + d) > 1.05:
                c = '%s —Ä—É–±–ª–µ–π –∑–∞ %s –≥—Ä–∞–º–º –≤—ã–≥–æ–¥–Ω–µ–µ,\n—á–µ–º %s —Ä—É–±–ª–µ–π –∑–∞ %s –≥—Ä–∞–º–º!\n–û—á–µ–Ω—å –≤—ã–≥–æ–¥–Ω–æ!' % (
                    vtoroe, vtoroegram, pervoe, pervoegram)
                e = '2Ô∏è‚É£–í—Ç–æ—Ä–æ–π –ø—Ä–æ–¥—É–∫—Ç –ª—É—á—à–µ!'
            else:
                c = '%s —Ä—É–±–ª–µ–π –∑–∞ %s –≥—Ä–∞–º–º –≤—ã–≥–æ–¥–Ω–µ–µ,\n—á–µ–º %s —Ä—É–±–ª–µ–π –∑–∞ %s –≥—Ä–∞–º–º!' % (
                    vtoroe, vtoroegram, pervoe, pervoegram)
                e = '2Ô∏è‚É£–í—Ç–æ—Ä–æ–π –ø—Ä–æ–¥—É–∫—Ç –ª—É—á—à–µ!'
        return c +'\n'+ e
    except:
        return '–û—à–∏–±–∫–∞'


def myprofile(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn1 = types.KeyboardButton("‚ùïÔ∏è–û–±–Ω–æ–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è")
    btn2 = types.KeyboardButton("‚ùîÔ∏è–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–æ–∫–µ–Ω—ã")
    btn3 = types.KeyboardButton("‚≠ïÔ∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    btn4 = types.KeyboardButton('‚ùå –£–¥–∞–ª–∏—Ç—å –∫–µ–π—Å—ã')
    markup.add(btn1, btn2, btn3, btn4)
    d = maindatabasecode.profileprint(message.from_user.id)
    v = list(d.keys())
    sst = '\n'
    for ind in range(len(d)):
        sst = sst + '<b>' + str(d[v[ind]][0]) + '</b>' + ' –∫—É–ø–ª–µ–Ω–Ω—ã–π –∑–∞ ' + '<b>' + str(
            d[v[ind]][1]) + '</b>' + ' —Ä—É–±–ª–µ–π.\n'
    if message.text == 'üë®‚Äçüè´ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å':
        msg = bot.send_message(message.chat.id, text=f"""
                –ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}, —Ç–≤–æ–∏ –∫–µ–π—Å—ã:{sst}
                """, reply_markup=markup, parse_mode='html')
    else:
        msg = bot.send_message(message.chat.id, text=f"""–¢–µ–ø–µ—Ä—å —Ç–≤–æ–∏ –∫–µ–π—Å—ã:{sst}
                """, parse_mode='html', reply_markup=markup)
    bot.register_next_step_handler(msg, handler_profileprint)


def handler_url(message):
    global url
    if message.text == "‚≠ïÔ∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        start(message)
        return
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("‚≠ïÔ∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    markup2 = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    btn1 = types.KeyboardButton("‚úîÔ∏è–î–∞")
    btn2 = types.KeyboardButton("‚úñÔ∏è–ù–µ—Ç")
    btn3 = types.KeyboardButton("‚≠ïÔ∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup2.add(btn1, btn2, btn3)
    url = message.text
    try:
        with sqlite3.connect('database.db') as db:
            cursor = db.cursor()
            cursor.execute("SELECT url FROM cases WHERE url = ? AND userid = ?", [url, message.from_user.id])
            if cursor.fetchone() is None:
                cursor.execute('INSERT INTO cases(url,userid) VALUES(?,?)', [url, message.from_user.id])
                db.commit()
                msg = bot.reply_to(message, '–ó–∞ —Å–∫–æ–ª—å–∫–æ —Ç—ã –µ–≥–æ –ø–æ–∫—É–ø–∞–ª?', reply_markup=markup)
                bot.register_next_step_handler(msg, handler_price)
            else:
                cursor.execute('SELECT caseid FROM cases WHERE url = ? AND userid = ?', [url, message.from_user.id])
                caseid = cursor.fetchone()[0]
                cursor.execute('SELECT price FROM cases WHERE url = ? AND userid = ?', [url, message.from_user.id])
                caseprice = str(cursor.fetchone()[0]) + ' —Ä—É–±.'
                # print(str(cursor.fetchone()[0])+' —Ä—É–±.')
                urltaken = '–≠—Ç–æ—Ç –∫–µ–π—Å —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω –∏ –∏–º–µ–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–¥ <b>ID: %s</b> –≤ –¥–∞—Ç–∞–±–∞–∑–µ\n–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ü–µ–Ω–∞:<b>%s</b> –•–æ—á–µ—à—å –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –µ–≥–æ —Ü–µ–Ω—É?' % (
                caseid, caseprice)
                msg = bot.reply_to(message, text=urltaken, reply_markup=markup2, parse_mode='html')
                bot.register_next_step_handler(msg, handler_url_taken)
    except sqlite3.Error as e:
        print('—á–µ—Ç–∞ –µ–±–Ω—É–ª–æ')
        print('–û—à–∏–±–∫–∞:\n', traceback.format_exc())
    finally:
        cursor.close()
        db.close()
        return url


def handler_url_taken(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("‚≠ïÔ∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    if message.text == "‚≠ïÔ∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        start(message)
        return
    elif message.text == '‚úîÔ∏è–î–∞':
        msg = bot.reply_to(message, '–ó–∞ —Å–∫–æ–ª—å–∫–æ —Ç—ã –µ–≥–æ –ø–æ–∫—É–ø–∞–ª?', reply_markup=markup)
        bot.register_next_step_handler(msg, handler_price)
    elif message.text == '‚úñÔ∏è–ù–µ—Ç':
        start(message)
        return


def handler_price(message):
    with sqlite3.connect('database.db') as db:
        cursor = db.cursor()
        if message.text == "‚≠ïÔ∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            try:
                cursor.execute("DELETE FROM cases WHERE price = 0 and url = ? and userid = ?",
                               [url, message.from_user.id])
                db.commit()
            except TypeError:
                start(message)
            start(message)
            return
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(types.KeyboardButton("‚ö™Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
        try:
            price = message.text
            price = float(price.replace(",", '.'))
            cursor.execute("UPDATE cases SET price = ? WHERE url = ? AND userid = ?", [price, url,
                                                                                       message.from_user.id])
            db.commit()
            bot.reply_to(message, '–ì–æ—Ç–æ–≤–æ ü•∞', reply_markup=markup)
            start(message)
        except:
            print('—á–µ—Ç–∞ –µ–±–Ω—É–ª–æ')
            print('–û—à–∏–±–∫–∞:\n', traceback.format_exc())
            bot.reply_to(message, '–¥—É—Ä–∞—á–æ–∫? —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞ –≤–≤–æ–¥–∏. –¢–µ–ø–µ—Ä—å –Ω–∞—á–∏–Ω–∞–π –≤—Å–µ —Å–Ω–∞—á–∞–ª–∞')
            cursor.execute("DELETE FROM cases WHERE url = ? AND userid = ?", [url, message.from_user.id])
            db.commit()
            start(message)


def handler_profileprint(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup2 = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("‚ùïÔ∏è–û–±–Ω–æ–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è")
    btn2 = types.KeyboardButton("‚ùîÔ∏è–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–æ–∫–µ–Ω—ã")
    btn3 = types.KeyboardButton("‚≠ïÔ∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    btn4 = types.KeyboardButton('‚ùå –£–¥–∞–ª–∏—Ç—å –∫–µ–π—Å—ã')
    markup.add(btn1, btn2, btn3, btn4)
    markup2.add(btn3)
    if message.text == "‚≠ïÔ∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        start(message)
        return
    elif message.text == '‚ùïÔ∏è–û–±–Ω–æ–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è':
        if mainparsing.takenames(message.from_user.id) == '–û–∫':
            bot.reply_to(message, '–ù–∞–∑–≤–∞–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É!', reply_markup=markup)
            myprofile(message)
        else:
            bot.reply_to(message, '–ì–¥–µ—Ç–æ —Ç—ã –Ω–∞–ø–æ—Ä—Ç–∞—á–∏–ª...', reply_markup=markup)
            myprofile(message)
    elif message.text == '‚ùîÔ∏è–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–æ–∫–µ–Ω—ã':
        if mainparsing.taketokens(message.from_user.id) == '–û–∫':
            bot.reply_to(message, '–¢–æ–∫–µ–Ω—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É!\n–ù–æ —Ç—ã –∏—Ö –Ω–µ —É–≤–∏–¥–∏—à—å...', reply_markup=markup)
            start(message)
        else:
            bot.reply_to(message, '–ì–¥–µ—Ç–æ —Ç—ã –Ω–∞–ø–æ—Ä—Ç–∞—á–∏–ª...', reply_markup=markup)
            myprofile(message)
    elif message.text == '‚ùå –£–¥–∞–ª–∏—Ç—å –∫–µ–π—Å—ã':
        caselist = maindatabasecode.deletecase1(message.from_user.id)
        deletecasetext = ''
        for i in range(len(caselist)):
            deletecasetext = deletecasetext + 'ID ' + str(caselist[i][0]) + ': ' + str(caselist[i][1]) + '\n'
        msg = bot.reply_to(message, f'–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –∫–µ–π—Å–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å.\n{deletecasetext}',
                           reply_markup=markup2)
        bot.register_next_step_handler(msg, handler_deletecase)


def handler_deletecase(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("‚ö™Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
    if message.text == "‚ö™Ô∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        start(message)
        return
    try:
        bot.send_message(message.chat.id, text=maindatabasecode.deletecase2(message))
        sleep(0.5)
        myprofile(message)
    except:
        bot.send_message(message.chat.id, text="–¢—ã —á–æ—Ç–æ –¥–µ–ª–∞–µ—à—å –Ω–µ —Ç–∞–∫, –¥–∞–≤–∞–π —Å–Ω–∞—á–∞–ª–∞", reply_markup=markup)
        start(message)
        print(traceback.format_exc())


def handler_caselookup(message):
    if message.text == "‚≠ïÔ∏è–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        start(message)
        return
    else:
        buttons(message)
        return


if __name__ == '__main__':
    print('  Date         | @username | Message text')
    bot.infinity_polling()
